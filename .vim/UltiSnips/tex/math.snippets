# ejmastnak/dotfiles

global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

priority 2
# BEGIN SUPERSCRIPTS AND SUBSCRIPTS
# ------------------------------------------------ #
context "math()"
snippet "([\w]|[\}\)\]\|'])'" "Superscript" rA
`!p snip.rv = match.group(1)`^{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([a-zA-Z]|[\}\)\]\|']);" "Subscript" rA
`!p snip.rv = match.group(1)`_{${1:${VISUAL:}}}$0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])sd" "Text subscript" rA
`!p snip.rv = match.group(1)`_{\mathrm{${1:${VISUAL:}}}}$0
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|'])"([\w]{1})" "Place the first \w character after the quotation mark in a subscript" rA
`!p snip.rv = match.group(1) + "^{" + match.group(2) + "}"`
endsnippet

context "math()"
snippet "([\w]|[\}\)\]\|']):([\w]{1})" "Place the first \w character after the : in a subscript" rA
`!p snip.rv = match.group(1) + "_{" + match.group(2) + "}"`
endsnippet

context "math()"
snippet "([\w]{1})__" "e.g. expand x__ into x_{1}, x_{2}, x_{3}" rA
`!p snip.rv = match.group(1) + "_{1}, " + match.group(1) + "_{2}, " + match.group(1) + "_{3}"`
endsnippet

context "math()"
snippet "([a-zA-Z]|[\}\)\]\|'])00" "Automatic 0 subscript" rA
`!p snip.rv = match.group(1)`_{0}
endsnippet


# context "math()"
# snippet "([\w]|[\}\)\]\|'])\"" "Access prime with quotation mark, since prime is used for superscript." rA
# `!p snip.rv = match.group(1)`'
# endsnippet
# ----------------------------------------- #
# END SUPERSCRIPTS AND SUBSCRIPTS


# BEGIN SEMANTIC COMMANDS (vec, tilde, etc...)
# --------------------------------------------- #
snippet "(^|[^a-zA-Z])ff" "\frac{}{}" rA
`!p snip.rv = match.group(1)`\frac{${1:${VISUAL:}}}{$2}$0
endsnippet

# ckunte fraction. !disabled
#snippet // "Fraction" iA
#\\frac{$1}{$2}$0
#endsnippet

snippet "(^|[^a-zA-Z])tf" "\tfrac{}{}" rA
`!p snip.rv = match.group(1)`\tfrac{${1:${VISUAL:}}}{$2}$0
endsnippet


# --------------------------------------------- #
# END SEMANTIC COMMANDS (vec, tilde, etc...)


# BEGIN INTEGRALS
# --------------------------------------------- #
snippet "([^\w\\])intt" "Integral with upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{$1}^{$2} $0
endsnippet

snippet "([^\w\\])innt" "Integral with symmetric upper and lower limit" rA
`!p snip.rv = match.group(1)`\int_{-$1}^{$1} $0
endsnippet

snippet "([^\w\\])int3" "\iiint" rA
`!p snip.rv = match.group(1)`\iiint
endsnippet

snippet "([^\w\\])int2" "\iint" rA
`!p snip.rv = match.group(1)`\iint
endsnippet
# END INTEGRALS
# --------------------------------------------- #


# BEGIN SUMS
# --------------------------------------------- #
context "math()"
snippet "([^\w\\])sM" "Sum with only lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}$0
endsnippet

context "math()"
snippet "([^\w\\])smm" "Sum with upper and lower limit" rA
`!p snip.rv = match.group(1)`\sum_{$1}^{$2}$0
endsnippet

snippet "([^\w\\])smf" "Sum from negative to positive infinity" rA
`!p snip.rv = match.group(1)`\sum_{$1-\infty}^{\infty} $0
endsnippet

# --------------------------------------------- #
# END SUMS

# BEGIN LIMITS
# --------------------------------------------- #
context "math()"
snippet "([^\w\\])lM" "\limits{} with only lower limit" rA
`!p snip.rv = match.group(1)`\limits_{$1}$0
endsnippet

context "math()"
snippet "([^\w\\])lmm" "\limits{}{} with upper and lower limit" rA
`!p snip.rv = match.group(1)`\limits_{$1}{$2}$0
endsnippet
# --------------------------------------------- #
# END LIMITS


# BEGIN STATIC MATH SNIPPETS
# ------------------------------------- #
snippet "([\W_])inff" "\infty" rA
`!p snip.rv = match.group(1)`\infty
endsnippet

context "math()"
snippet "([\W_])intf" "Integral from negative to positive infinity" rA
`!p snip.rv = match.group(1)`\int_{-\infty}^{\infty} 
endsnippet

context "math()"
snippet >> "\implies" Ai
\implies 
endsnippet

context "math()"
snippet lra "\leftrightarrow" A
\leftrightarrow 
endsnippet

context "math()"
snippet ,. "\cdot" iA
\cdot 
endsnippet

context "math()"
snippet xx "\cross" A
\times 
endsnippet

# ------------------------------------- #
# END STATIC MATH SNIPPETS

